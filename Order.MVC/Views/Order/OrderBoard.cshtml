@model IEnumerable<Order.MVC.Models.OrderEntity>
@{
    ViewData["Title"] = "Painel de Pedidos";
    var pedidosEmAndamento = Model.Where(o => !o.DateReady.HasValue && !o.DateDelivered.HasValue).ToList();
    var pedidosProntos = Model.Where(o => o.DateReady.HasValue && !o.DateDelivered.HasValue).ToList();
    var pedidosEntregues = Model.Where(o => o.DateDelivered.HasValue).ToList();
}

<h1 class="mb-4">Painel de Pedidos</h1>

<div class="mb-3 d-flex justify-content-between align-items-center">
    <div>
        <div class="form-check form-check-inline">
            <input class="form-check-input column-toggle" type="checkbox" id="toggleInProgress" checked data-column="inProgress">
            <label class="form-check-label" for="toggleInProgress"><i class="bi bi-hourglass-split"></i> Em Andamento</label>
        </div>
        <div class="form-check form-check-inline">
            <input class="form-check-input column-toggle" type="checkbox" id="toggleReady" checked data-column="ready">
            <label class="form-check-label" for="toggleReady"><i class="bi bi-check2-all"></i> Prontos para Retirar</label>
        </div>
    </div>
    <div id="auto-refresh-indicator" class="text-muted">
        <small><i class="bi bi-arrow-repeat"></i> Atualização automática: <span id="countdown">5</span>s</small>
    </div>
</div>

<div class="row">
    <div class="col-md-6" id="inProgressColumn">
        <div class="card border-warning h-100">
            <div class="card-header bg-warning text-white">
                <h5 class="mb-0">Em Andamento (@pedidosEmAndamento.Count)</h5>
            </div>
            <div class="card-body">
                @if (pedidosEmAndamento.Any())
                {
                    <div class="d-flex flex-column gap-2">
                        @foreach (var order in pedidosEmAndamento)
                        {
                            <div class="card">
                                <div class="card-body p-3">
                                    <h6 class="card-title">Pedido #@order.OrderId</h6>
                                    <h3 class="card-text mb-1"><strong>Cliente:</strong> @order.Name</h3>
                                    <p class="card-text mb-1"><strong>Horário:</strong> @order.DateOrder.ToString("HH:mm")</p>
                                    <p class="card-text mb-1">
                                        <strong>Tempo em preparo:</strong> 
                                        <span class="badge bg-warning text-dark timer" 
                                              data-timestamp="@order.DateOrder.ToString("yyyy-MM-ddTHH:mm:ss")">
                                            <i class="bi bi-stopwatch"></i> Calculando...
                                        </span>
                                    </p>
                                    <p class="card-text mb-2"><strong>Itens:</strong> @order.OrderProducts.Count</p>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-center text-muted my-5">Nenhum pedido em andamento</p>
                }
            </div>
        </div>
    </div>
    
    <div class="col-md-6" id="readyColumn">
        <div class="card border-success h-100">
            <div class="card-header bg-success text-white">
                <h5 class="mb-0">Prontos para Retirar (@pedidosProntos.Count)</h5>
            </div>
            <div class="card-body">
                @if (pedidosProntos.Any())
                {
                    <div class="d-flex flex-column gap-2">
                        @foreach (var order in pedidosProntos)
                        {
                            <div class="card">
                                <div class="card-body p-3">
                                    <h6 class="card-title">Pedido #@order.OrderId</h6>
                                    <h3 class="card-text mb-1"><strong>Cliente:</strong> @order.Name</h3>
                                    <p class="card-text mb-1"><strong>Horário:</strong> @order.DateOrder.ToString("HH:mm")</p>
                                    <p class="card-text mb-1"><strong>Pronto às:</strong> @order.DateReady?.ToString("HH:mm")</p>
                                    <p class="card-text mb-1">
                                        <strong>Tempo aguardando:</strong> 
                                        <span class="badge bg-success timer" 
                                              data-timestamp="@order.DateReady?.ToString("yyyy-MM-ddTHH:mm:ss")">
                                            <i class="bi bi-stopwatch"></i> Calculando...
                                        </span>
                                    </p>
                                    <p class="card-text mb-2"><strong>Itens:</strong> @order.OrderProducts.Count</p>

                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-center text-muted my-5">Nenhum pedido pronto para retirar</p>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Toggle column visibility
            $('.column-toggle').change(function () {
                var columnId = $(this).data('column');
                if ($(this).is(':checked')) {
                    $('#' + columnId + 'Column').show();
                } else {
                    $('#' + columnId + 'Column').hide();
                }
            });

            // Initialize timers
            updateAllTimers();
            
            // Update timers every second
            setInterval(updateAllTimers, 1000);
            
            // Function to update all timer elements
            function updateAllTimers() {
                $('.timer').each(function() {
                    var timestamp = $(this).data('timestamp');
                    if (timestamp) {
                        var startTime = new Date(timestamp);
                        var now = new Date();
                        var diff = now - startTime;
                        
                        // Convert to hours, minutes, seconds
                        var hours = Math.floor(diff / (1000 * 60 * 60));
                        var minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
                        var seconds = Math.floor((diff % (1000 * 60)) / 1000);
                        
                        // Format display text
                        var displayText = '';
                        if (hours > 0) {
                            displayText += hours + 'h ';
                        }
                        displayText += minutes + 'min ' + seconds + 's';
                        
                        // Change badge color based on elapsed time
                        if (hours >= 1 || minutes >= 30) {
                            $(this).removeClass('bg-warning bg-success bg-info').addClass('bg-danger');
                        } else if (minutes >= 15) {
                            $(this).removeClass('bg-success bg-info bg-danger').addClass('bg-warning');
                        }
                        
                        // Update the timer text
                        $(this).html('<i class="bi bi-stopwatch"></i> ' + displayText);
                    }
                });
            }
            
            // Auto refresh functionality
            let countdownValue = 5;
            
            // Update countdown display every second
            const countdownInterval = setInterval(function() {
                countdownValue--;
                $('#countdown').text(countdownValue);
                
                if (countdownValue <= 0) {
                    // Reset countdown
                    countdownValue = 5;
                    
                    // Show refreshing message
                    $('#auto-refresh-indicator').html('<small><i class="bi bi-arrow-repeat fa-spin"></i> Atualizando...</small>');
                    
                    // Reload the page
                    location.reload();
                }
            }, 1000);
            
            // If user navigates away, clear the interval to prevent memory leaks
            $(window).on('beforeunload', function() {
                clearInterval(countdownInterval);
            });
            
            // Add pulsing effect to the auto-refresh indicator
            setInterval(function() {
                $('#auto-refresh-indicator').fadeTo(500, 0.5).fadeTo(500, 1);
            }, 1000);
        });
    </script>
}
